{"version":3,"file":"c2aad20868020ccc6dc79584802d91cef97051ea-0fc844c431e5fd4767dc.js","mappings":"+KAMMA,EAAiB,CACnBC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,UAAW,GAGfC,OAAOC,OAAOR,GAOd,IA6DaS,EAtBkB,SAACC,GAC5B,OAAQA,GACJ,KAAKV,EAAeC,MAChB,MAAO,aACX,KAAKD,EAAeE,OAChB,MAAO,cACX,KAAKF,EAAeG,MAChB,MAAO,aACX,KAAKH,EAAeI,OAChB,MAAO,cACX,KAAKJ,EAAeK,MAChB,MAAO,aACX,KAAKL,EAAeM,UAChB,MAAM,IAAIK,MAAM,sCACpB,QACI,MAAM,IAAIA,MAAJ,iCAC+BD,EAD/B,gBAOuBE,CA7Df,SAACC,GAIvB,QAAYC,IAHUC,EAAAA,GACAC,MAAK,qBAAGC,KAAgBJ,KAG1C,MAAM,IAAIF,MAAM,6BAMpB,IAAMO,EAAKC,EAAAA,GAAAA,QAAiB,cACtBC,EAAKD,EAAAA,GAAAA,QAAiB,cAEtBE,EAAMF,EAAAA,GAAAA,MAEZ,GAAIE,EAAMD,EACN,OAAOpB,EAAeM,UAEtB,IAAMgB,EAAOD,EAAIC,KAAKJ,EAAI,SAASK,WAAWC,OAAS,EACjDA,EAAQC,KAAKC,KAAKJ,GAExB,OADAK,QAAQC,IAAI,CAAEJ,MAAOA,IACbA,GACJ,KAAK,EACD,OAAOxB,EAAeC,MAC1B,KAAK,EACD,OAAOD,EAAeE,OAC1B,KAAK,EACD,OAAOF,EAAeG,MAC1B,KAAK,EACD,OAAOH,EAAeI,OAC1B,KAAK,EACD,OAAOJ,EAAeK,MAC1B,QACI,OAAOL,EAAeM,WA0BPuB,CAAkB,S","sources":["webpack://michaeldemar.co/./src/data/Constants.ts"],"sourcesContent":["import { DateTime } from \"luxon\";\nimport cv from \"./cv.json\";\n\n/**\n * Enumeration for possible university years.\n */\nconst UniversityYear = {\n    FIRST: 1,\n    SECOND: 2,\n    THIRD: 3,\n    FOURTH: 4,\n    FIFTH: 5,\n    GRADUATED: 6,\n};\n\nObject.freeze(UniversityYear);\n\n/**\n * Determine the current university year.\n *\n * @returns {string} a UniversityYear\n */\nconst getUniversityYear = (universityId: string): number => {\n    const { education } = cv;\n    const ubc = education.find(({ id }) => id === universityId);\n\n    if (ubc === undefined) {\n        throw new Error(\"Could not find UBC in CV!\");\n    }\n\n    // const { startDate, endDate } = ubc;\n    // const sd = DateTime.fromISO(startDate);\n    // const ed = DateTime.fromISO(endDate);\n    const sd = DateTime.fromISO(\"2019-09-01\");\n    const ed = DateTime.fromISO(\"2023-05-01\");\n\n    const now = DateTime.now();\n\n    if (now > ed) {\n        return UniversityYear.GRADUATED;\n    } else {\n        const diff = now.diff(sd, \"years\").toObject().years || 0;\n        const years = Math.ceil(diff);\n        console.log({ years: years })\n        switch (years) {\n            case 1:\n                return UniversityYear.FIRST;\n            case 2:\n                return UniversityYear.SECOND;\n            case 3:\n                return UniversityYear.THIRD;\n            case 4:\n                return UniversityYear.FOURTH;\n            case 5:\n                return UniversityYear.FIFTH;\n            default:\n                return UniversityYear.GRADUATED;\n        }\n    }\n};\n\nconst universityYearToString = (universityYear: number): string => {\n    switch (universityYear) {\n        case UniversityYear.FIRST:\n            return \"first-year\";\n        case UniversityYear.SECOND:\n            return \"second-year\";\n        case UniversityYear.THIRD:\n            return \"third-year\";\n        case UniversityYear.FOURTH:\n            return \"fourth-year\";\n        case UniversityYear.FIFTH:\n            return \"fifth-year\";\n        case UniversityYear.GRADUATED:\n            throw new Error(\"Trying to display graduated value!\");\n        default:\n            throw new Error(\n                `Cannot convert universityYear ${universityYear} to string!`\n            );\n    }\n};\n\nexport const UNIVERSITY_YEAR = getUniversityYear(\"ubc\");\nexport const UNIVERSITY_YEAR_AS_STRING = universityYearToString(\n    UNIVERSITY_YEAR\n);\n"],"names":["UniversityYear","FIRST","SECOND","THIRD","FOURTH","FIFTH","GRADUATED","Object","freeze","UNIVERSITY_YEAR_AS_STRING","universityYear","Error","universityYearToString","universityId","undefined","cv","find","id","sd","DateTime","ed","now","diff","toObject","years","Math","ceil","console","log","getUniversityYear"],"sourceRoot":""}