{"version":3,"file":"component---src-templates-post-list-template-tsx-81a44beba93d5016d324.js","mappings":"kOAwEA,EA7CmB,SAAC,GAAmD,IAAjDA,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,KAClBC,EAAQF,EAAKG,YAAYD,OAASF,EAAKI,OAAOC,KAC9CC,EAAI,IAAOL,EAAOD,EAAKI,OAAOC,KAG9BE,GAAQC,EAAAA,EAAAA,GAASR,EAAKG,YAAYM,eAExC,QAAcC,IAAVH,EACA,MAAM,IAAII,MAAJ,mDAA6DT,EAA7D,KAGV,OACI,2BAASU,UClCC,kCDmCN,8BACI,gBAAC,EAAAC,EAAD,CACIN,MAAOA,EACPO,IAAQZ,EAAL,UACHU,UCzCD,oCD2CH,sBAAIA,UCxCD,mCDyCC,gBAAC,EAAAG,KAAD,CACIC,MAAO,CAAEC,UAAU,QACnBC,GAAIZ,GAEHJ,IAGT,qBAAGU,UCrDD,kCDqD0BZ,EAAKG,YAAYgB,OAEjD,2BAASP,UCtDA,qCDuDL,qBACIQ,wBAAyB,CACrBC,OAAQrB,EAAKG,YAAYmB,aAAetB,EAAKuB,WAGrD,qBAAGX,UC1DD,kCD2DE,gBAAC,EAAAG,KAAD,CAAMC,MAAO,CAAEC,UAAU,QAAWC,GAAIZ,GAAxC,iBEepB,EA/CyB,SAAC,GAIkB,IAHxCkB,EAGuC,EAHvCA,KACAC,EAEuC,EAFvCA,YACAC,EACuC,EADvCA,SAKwBxB,EAGpBsB,EAJAG,KACIC,aAAgB1B,MAEQ2B,EAC5BL,EADAM,kBAAqBC,MAIjB9B,EAAgCwB,EAAhCxB,KAAM+B,EAA0BP,EAA1BO,YAAaC,EAAaR,EAAbQ,SAIrBC,EAAOC,KAAKC,IAAIJ,EAAc,EAAGC,GACjCI,EAAOF,KAAKG,IAAIN,EAAc,EAAG,GAEvC,OACI,gBAACO,EAAA,EAAD,CAAQb,SAAUA,EAAUxB,MAAOA,GAC/B,gBAACsC,EAAA,EAAD,CAAKtC,MAAOD,IACZ,gBAACwC,EAAA,EAAD,MACA,uBAAK7B,UCvDE,yCDwDFiB,EAAMa,KAAI,WAA8BC,GAAe,IAA1C3C,EAAyC,EAAzCA,KACV,OAAO,gBAAC,EAAD,CAAY4C,IAAKD,EAAG1C,KAAMA,EAAMD,KAAMA,QAGrD,uBAAKY,UC3DM,6CD4DNoB,EAAc,GACX,gBAAC,EAAAjB,KAAD,CAAMG,GAAE,IAAMjB,GAAgB,IAAToC,EAAa,GAAb,IAAsBA,IAA3C,QAIHL,EAAc,GAAKA,EAAcC,GAC9B,iCAEHD,EAAcC,GACX,gBAAC,EAAAlB,KAAD,CAAMG,GAAE,IAAMjB,EAAN,IAAciC,GAAtB","sources":["webpack://michaeldemar.co/./src/components/PostHeader/PostHeader.tsx","webpack://michaeldemar.co/./src/components/PostHeader/PostHeader.module.scss","webpack://michaeldemar.co/./src/templates/PostListTemplate.tsx","webpack://michaeldemar.co/./src/templates/PostListTemplate.module.scss"],"sourcesContent":["import React, { ReactElement } from \"react\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport * as styles from \"./PostHeader.module.scss\";\n\ninterface PostHeaderProps {\n    type: string;\n    node: {\n        excerpt: string;\n        frontmatter: {\n            title: string;\n            featuredImage: {\n                childImageSharp: {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    fluid: any;\n                };\n            };\n            date: string;\n            description: string;\n        };\n        fields: {\n            slug: string;\n        };\n    };\n}\n\nconst PostHeader = ({ node, type }: PostHeaderProps): ReactElement => {\n    const title = node.frontmatter.title || node.fields.slug;\n    const link = `/${type}${node.fields.slug}`\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const image = getImage(node.frontmatter.featuredImage as any)\n\n    if (image === undefined) {\n        throw new Error(`Could not find header image for post with title ${title}!`)\n    }\n\n    return (\n        <article className={styles.post}>\n            <header>\n                <GatsbyImage\n                    image={image}\n                    alt={`${title} header`}\n                    className={styles.image}\n                />\n                <h3 className={styles.title}>\n                    <Link\n                        style={{ boxShadow: `none` }}\n                        to={link}\n                    >\n                        {title}\n                    </Link>\n                </h3>\n                <p className={styles.date}>{node.frontmatter.date}</p>\n            </header>\n            <section className={styles.excerpt}>\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.description || node.excerpt,\n                    }}\n                />\n                <p className={styles.more}>\n                    <Link style={{ boxShadow: `none` }} to={link}>\n                        Read more\n                    </Link>\n                </p>\n            </section>\n        </article>\n    );\n};\n\nexport default PostHeader;\n","// extracted by mini-css-extract-plugin\nexport var date = \"PostHeader-module--date--RY36m\";\nexport var excerpt = \"PostHeader-module--excerpt--e4BC7\";\nexport var image = \"PostHeader-module--image---PAD4\";\nexport var more = \"PostHeader-module--more--zQm02\";\nexport var post = \"PostHeader-module--post--zjTjL\";\nexport var title = \"PostHeader-module--title--ELi3U\";","import React, { ReactElement, ReactNode } from \"react\";\nimport { graphql, Link } from \"gatsby\";\n\nimport Bio from \"../components/Bio/Bio\";\nimport Format from \"../components/Format/Format\";\nimport SEO from \"../components/SEO/SEO\";\nimport PostHeader from \"../components/PostHeader/PostHeader\";\nimport * as styles from \"./PostListTemplate.module.scss\";\n\ninterface PostListTemplateProps {\n    children?: ReactNode;\n    data: {\n        site: {\n            siteMetadata: {\n                title: string;\n            };\n        };\n        allMarkdownRemark: {\n            edges: {\n                node: unknown;\n            }[];\n        };\n    };\n    pageContext: {\n        type: string;\n        currentPage: number;\n        numPages: number;\n    };\n    location: string;\n}\n\nconst PostListTemplate = ({\n    data,\n    pageContext,\n    location,\n}: PostListTemplateProps): ReactElement => {\n    // Get page title and posts\n    const {\n        site: {\n            siteMetadata: { title },\n        },\n        allMarkdownRemark: { edges: posts },\n    } = data;\n\n    // Get context of which page this is out of the list of pages\n    const { type, currentPage, numPages } = pageContext;\n\n    // Compute next and previous\n    // TODO: could implement fancier pagination hook, but given pages are so small currently, not urgent\n    const next = Math.min(currentPage + 1, numPages);\n    const prev = Math.max(currentPage - 1, 0);\n\n    return (\n        <Format location={location} title={title}>\n            <SEO title={type} />\n            <Bio />\n            <div className={styles.posts}>\n                {posts.map(({ node }: { node: unknown }, i: number) => {\n                    return <PostHeader key={i} type={type} node={node} />;\n                })}\n            </div>\n            <div className={styles.redirects}>\n                {currentPage > 1 && (\n                    <Link to={`/${type}${prev === 1 ? \"\" : `/${prev}`}`}>\n                        {`Back`}\n                    </Link>\n                )}\n                {currentPage > 1 && currentPage < numPages && (\n                    <span>{`â€¢`}</span>\n                )}\n                {currentPage < numPages && (\n                    <Link to={`/${type}/${next}`}>{`Next`}</Link>\n                )}\n            </div>\n        </Format>\n    );\n};\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`query postListQuery($skip: Int!, $limit: Int!, $type: String!) {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(\n    sort: {fields: [frontmatter___date], order: DESC}\n    filter: {frontmatter: {type: {eq: $type}}}\n    limit: $limit\n    skip: $skip\n  ) {\n    edges {\n      node {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(\n                  placeholder: DOMINANT_COLOR\n                  formats: [AUTO, WEBP, AVIF]\n                  layout: CONSTRAINED\n                )\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n","// extracted by mini-css-extract-plugin\nexport var posts = \"PostListTemplate-module--posts--nu+Uk\";\nexport var redirects = \"PostListTemplate-module--redirects--uOMSU\";"],"names":["node","type","title","frontmatter","fields","slug","link","image","getImage","featuredImage","undefined","Error","className","G","alt","Link","style","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","data","pageContext","location","site","siteMetadata","posts","allMarkdownRemark","edges","currentPage","numPages","next","Math","min","prev","max","Format","SEO","Bio","map","i","key"],"sourceRoot":""}