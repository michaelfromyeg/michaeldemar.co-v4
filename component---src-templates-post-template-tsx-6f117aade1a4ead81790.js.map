{"version":3,"file":"component---src-templates-post-template-tsx-6f117aade1a4ead81790.js","mappings":"uNA2HA,EAxEqB,SAAC,GAIkB,IAHpCA,EAGmC,EAHnCA,KACAC,EAEmC,EAFnCA,YACAC,EACmC,EADnCA,SAIoBC,EAIhBH,EAJAI,eAEoBC,EAEpBL,EAHAM,KACIC,aAAgBF,MAKhBG,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAElB,OACI,gBAACC,EAAA,EAAD,CAAQR,SAAUA,EAAUG,MAAOA,GAC/B,gBAACM,EAAA,EAAD,CACIN,MAAOF,EAAKS,YAAYP,MACxBQ,YAAaV,EAAKS,YAAYC,aAAeV,EAAKW,UAEtD,+BACI,8BACI,sBAAIC,UC1EL,qCD0E+BZ,EAAKS,YAAYP,OAC/C,yBAAIF,EAAKS,YAAYI,OAEzB,2BAASC,wBAAyB,CAAEC,OAAQf,EAAKgB,QACjD,2BACA,8BACI,gBAACC,EAAA,EAAD,SAINX,GAAQD,IACN,2BACI,sBACIa,MAAO,CACHC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGZlB,GACG,0BACI,gBAAC,EAAAmB,KAAD,CACIC,GAAE,IAAMpB,EAASI,YAAYiB,KAAOrB,EAASsB,OAAOC,KACpDC,IAAI,QAFR,KAIOxB,EAASI,YAAYP,QAInCI,GACG,0BACI,gBAAC,EAAAkB,KAAD,CACIC,GAAE,IAAMnB,EAAKG,YAAYiB,KAAOpB,EAAKqB,OAAOC,KAC5CC,IAAI,QAEHvB,EAAKG,YAAYP,MAJtB","sources":["webpack://michaeldemar.co/./src/templates/PostTemplate.tsx","webpack://michaeldemar.co/./src/templates/PostTemplate.module.scss"],"sourcesContent":["import React, { ReactElement, ReactNode } from \"react\";\nimport { graphql, Link } from \"gatsby\";\n\nimport Bio from \"../components/Bio/Bio\";\nimport Format from \"../components/Format/Format\";\nimport SEO from \"../components/SEO/SEO\";\n\nimport * as styles from \"./PostTemplate.module.scss\";\n\ninterface PostTemplateProps {\n    children?: ReactNode;\n    data: {\n        site: {\n            siteMetadata: {\n                title: string;\n            };\n        };\n        markdownRemark: {\n            html: string;\n            excerpt: string;\n            frontmatter: {\n                title: string;\n                description: string;\n                date: string;\n            };\n        };\n    };\n    pageContext: {\n        type: string;\n        previous: {\n            fields: {\n                slug: string;\n            };\n            frontmatter: {\n                title: string;\n                type: string;\n            };\n        };\n        next: {\n            fields: {\n                slug: string;\n            };\n            frontmatter: {\n                title: string;\n                type: string;\n            };\n        };\n    };\n    location: string;\n}\n\nconst PostTemplate = ({\n    data,\n    pageContext,\n    location,\n}: PostTemplateProps): ReactElement => {\n    // Get post data, site title\n    const {\n        markdownRemark: post,\n        site: {\n            siteMetadata: { title },\n        },\n    } = data;\n\n    // Get previous page, next page from context\n    const { previous, next } = pageContext;\n\n    return (\n        <Format location={location} title={title}>\n            <SEO\n                title={post.frontmatter.title}\n                description={post.frontmatter.description || post.excerpt}\n            />\n            <article>\n                <header>\n                    <h1 className={styles.title}>{post.frontmatter.title}</h1>\n                    <p>{post.frontmatter.date}</p>\n                </header>\n                <section dangerouslySetInnerHTML={{ __html: post.html }} />\n                <hr />\n                <footer>\n                    <Bio />\n                </footer>\n            </article>\n            {/* Render navigation to next and previous post (if a next or previous post exists!) */}\n            {(next || previous) && (\n                <nav>\n                    <ul\n                        style={{\n                            display: `flex`,\n                            flexWrap: `wrap`,\n                            justifyContent: `space-between`,\n                            listStyle: `none`,\n                            padding: 0,\n                        }}\n                    >\n                        {previous && (\n                            <li>\n                                <Link\n                                    to={`/${previous.frontmatter.type}${previous.fields.slug}`}\n                                    rel=\"prev\"\n                                >\n                                    ← {previous.frontmatter.title}\n                                </Link>\n                            </li>\n                        )}\n                        {next && (\n                            <li>\n                                <Link\n                                    to={`/${next.frontmatter.type}${next.fields.slug}`}\n                                    rel=\"next\"\n                                >\n                                    {next.frontmatter.title} →\n                                </Link>\n                            </li>\n                        )}\n                    </ul>\n                </nav>\n            )}\n        </Format>\n    );\n};\n\nexport default PostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($slug: String!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                description\n            }\n        }\n    }\n`;\n","// extracted by mini-css-extract-plugin\nexport var title = \"PostTemplate-module--title--kBds5\";"],"names":["data","pageContext","location","post","markdownRemark","title","site","siteMetadata","previous","next","Format","SEO","frontmatter","description","excerpt","className","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","type","fields","slug","rel"],"sourceRoot":""}